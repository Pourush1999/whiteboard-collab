{"version":3,"sources":["logo.svg","components/board/Board.jsx","components/container/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Board","props","socket","io","connect","isDrawing","on","data","root","this","interval","setInterval","clearInterval","image","Image","ctx","document","querySelector","getContext","onload","drawImage","src","drawOnCanvas","newProps","strokeStyle","color","lineWidth","size","canvas","sketch","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","mouse","x","y","last_mouse","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineJoin","lineCap","onPaint","removeEventListener","beginPath","moveTo","lineTo","closePath","stroke","undefined","timeout","clearTimeout","setTimeout","base64ImageData","toDataURL","emit","class","id","className","React","Component","Container","state","params","setState","target","value","type","onChange","changeColor","bind","changeSize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aaa125b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport io from 'socket.io-client';\n\nimport './style.css';\n\nclass Board extends React.Component {\n\n    timeout;\n    socket = io.connect(\"http://localhost:3000\");\n\n    ctx;\n    isDrawing = false;\n\n    constructor(props) {\n        super(props);\n\n        this.socket.on(\"canvas-data\", function(data){\n\n            var root = this;\n            var interval = setInterval(function(){\n                if(root.isDrawing) return;\n                root.isDrawing = true;\n                clearInterval(interval);\n                var image = new Image();\n                var canvas = document.querySelector('#board');\n                var ctx = canvas.getContext('2d');\n                image.onload = function() {\n                    ctx.drawImage(image, 0, 0);\n\n                    root.isDrawing = false;\n                };\n                image.src = data;\n            }, 200)\n        })\n    }\n\n    componentDidMount() {\n        this.drawOnCanvas();\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.ctx.strokeStyle = newProps.color;\n        this.ctx.lineWidth = newProps.size;\n    }\n\n    drawOnCanvas() {\n        var canvas = document.querySelector('#board');\n        this.ctx = canvas.getContext('2d');\n        var ctx = this.ctx;\n\n        var sketch = document.querySelector('#sketch');\n        var sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n\n        var mouse = {x: 0, y: 0};\n        var last_mouse = {x: 0, y: 0};\n\n        /* Mouse Capturing Work */\n        canvas.addEventListener('mousemove', function(e) {\n            last_mouse.x = mouse.x;\n            last_mouse.y = mouse.y;\n\n            mouse.x = e.pageX - this.offsetLeft;\n            mouse.y = e.pageY - this.offsetTop;\n        }, false);\n\n\n        /* Drawing on Paint App */\n        ctx.lineWidth = this.props.size;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.strokeStyle = this.props.color;\n\n        canvas.addEventListener('mousedown', function(e) {\n            canvas.addEventListener('mousemove', onPaint, false);\n        }, false);\n\n        canvas.addEventListener('mouseup', function() {\n            canvas.removeEventListener('mousemove', onPaint, false);\n        }, false);\n\n        var root = this;\n        var onPaint = function() {\n            ctx.beginPath();\n            ctx.moveTo(last_mouse.x, last_mouse.y);\n            ctx.lineTo(mouse.x, mouse.y);\n            ctx.closePath();\n            ctx.stroke();\n\n            if(root.timeout != undefined) clearTimeout(root.timeout);\n            root.timeout = setTimeout(function(){\n                var base64ImageData = canvas.toDataURL(\"image/png\");\n                root.socket.emit(\"canvas-data\", base64ImageData);\n            }, 1000)\n        };\n    }\n\n    render() {\n        return (\n            <div class=\"sketch\" id=\"sketch\">\n                <canvas className=\"board\" id=\"board\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Board","import React from 'react';\nimport Board from '../board/Board';\n\nimport './style.css';\n\nclass Container extends React.Component\n{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: \"#000000\",\n            size: \"5\"\n        }\n    }\n\n    changeColor(params) {\n        this.setState({\n            color: params.target.value\n        })\n    }\n\n    changeSize(params) {\n        this.setState({\n            size: params.target.value\n        })\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div class=\"tools-section\">\n                    <div className=\"color-picker-container\">\n                        Select Brush Color : &nbsp; \n                        <input type=\"color\" value={this.state.color} onChange={this.changeColor.bind(this)}/>\n                    </div>\n\n                    <div className=\"brushsize-container\">\n                        Select Brush Size : &nbsp; \n                        <select value={this.state.size} onChange={this.changeSize.bind(this)}>\n                            <option> 5 </option>\n                            <option> 10 </option>\n                            <option> 15 </option>\n                            <option> 20 </option>\n                            <option> 25 </option>\n                            <option> 30 </option>\n                        </select>\n                    </div>\n\n                </div>\n\n                <div class=\"board-container\">\n                    <Board color={this.state.color} size={this.state.size}></Board>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Container","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from './components/container/Container';\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}